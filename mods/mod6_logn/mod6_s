// generated with brms 2.11.3
functions {

  /* hurdle lognormal log-PDF of a single response 
   * Args: 
   *   y: the response value 
   *   mu: mean parameter of the lognormal distribution 
   *   sigma: sd parameter of the lognormal distribution
   *   hu: hurdle probability
   * Returns:  
   *   a scalar to be added to the log posterior 
   */ 
  real hurdle_lognormal_lpdf(real y, real mu, real sigma, real hu) { 
    if (y == 0) { 
      return bernoulli_lpmf(1 | hu); 
    } else { 
      return bernoulli_lpmf(0 | hu) +  
             lognormal_lpdf(y | mu, sigma); 
    } 
  }
  /* hurdle lognormal log-PDF of a single response
   * logit parameterization of the hurdle part
   * Args: 
   *   y: the response value 
   *   mu: mean parameter of the lognormal distribution 
   *   sigma: sd parameter of the lognormal distribution
   *   hu: linear predictor for the hurdle part 
   * Returns:  
   *   a scalar to be added to the log posterior 
   */ 
  real hurdle_lognormal_logit_lpdf(real y, real mu, real sigma, real hu) { 
    if (y == 0) { 
      return bernoulli_logit_lpmf(1 | hu); 
    } else { 
      return bernoulli_logit_lpmf(0 | hu) +  
             lognormal_lpdf(y | mu, sigma); 
    } 
  } 
  // hurdle lognormal log-CCDF and log-CDF functions 
  real hurdle_lognormal_lccdf(real y, real mu, real sigma, real hu) { 
    return bernoulli_lpmf(0 | hu) + lognormal_lccdf(y | mu, sigma); 
  }
  real hurdle_lognormal_lcdf(real y, real mu, real sigma, real hu) { 
    return log1m_exp(hurdle_lognormal_lccdf(y | mu, sigma, hu));
  }
}
data {
  int<lower=1> N;  // number of observations
  int<lower=1> N_dispersalkm;  // number of observations
  vector[N_dispersalkm] Y_dispersalkm;  // response variable
  int<lower=1> K_dispersalkm;  // number of population-level effects
  matrix[N_dispersalkm, K_dispersalkm] X_dispersalkm;  // population-level design matrix
  int<lower=1> N_meanhram2;  // number of observations
  vector[N_meanhram2] Y_meanhram2;  // response variable
  int<lower=1> K_meanhram2;  // number of population-level effects
  matrix[N_meanhram2, K_meanhram2] X_meanhram2;  // population-level design matrix
  int<lower=1> N_Migrationkm;  // number of observations
  vector[N_Migrationkm] Y_Migrationkm;  // response variable
  int<lower=1> K_Migrationkm;  // number of population-level effects
  matrix[N_Migrationkm, K_Migrationkm] X_Migrationkm;  // population-level design matrix
  // data for group-level effects of ID 1
  int<lower=1> N_1;  // number of grouping levels
  int<lower=1> M_1;  // number of coefficients per level
  int<lower=1> J_1_dispersalkm[N_dispersalkm];  // grouping indicator per observation
  // cholesky factor of known covariance matrix
  matrix[N_1, N_1] Lcov_1;
  // group-level predictor values
  vector[N_dispersalkm] Z_1_dispersalkm_1;
  // data for group-level effects of ID 2
  int<lower=1> N_2;  // number of grouping levels
  int<lower=1> M_2;  // number of coefficients per level
  int<lower=1> J_2_meanhram2[N_meanhram2];  // grouping indicator per observation
  // cholesky factor of known covariance matrix
  matrix[N_2, N_2] Lcov_2;
  // group-level predictor values
  vector[N_meanhram2] Z_2_meanhram2_1;
  // data for group-level effects of ID 3
  int<lower=1> N_3;  // number of grouping levels
  int<lower=1> M_3;  // number of coefficients per level
  int<lower=1> J_3_Migrationkm[N_Migrationkm];  // grouping indicator per observation
  // cholesky factor of known covariance matrix
  matrix[N_3, N_3] Lcov_3;
  // group-level predictor values
  vector[N_Migrationkm] Z_3_Migrationkm_1;
  int prior_only;  // should the likelihood be ignored?
}
transformed data {
  int Kc_dispersalkm = K_dispersalkm - 1;
  matrix[N_dispersalkm, Kc_dispersalkm] Xc_dispersalkm;  // centered version of X_dispersalkm without an intercept
  vector[Kc_dispersalkm] means_X_dispersalkm;  // column means of X_dispersalkm before centering
  int Kc_meanhram2 = K_meanhram2 - 1;
  matrix[N_meanhram2, Kc_meanhram2] Xc_meanhram2;  // centered version of X_meanhram2 without an intercept
  vector[Kc_meanhram2] means_X_meanhram2;  // column means of X_meanhram2 before centering
  int Kc_Migrationkm = K_Migrationkm - 1;
  matrix[N_Migrationkm, Kc_Migrationkm] Xc_Migrationkm;  // centered version of X_Migrationkm without an intercept
  vector[Kc_Migrationkm] means_X_Migrationkm;  // column means of X_Migrationkm before centering
  for (i in 2:K_dispersalkm) {
    means_X_dispersalkm[i - 1] = mean(X_dispersalkm[, i]);
    Xc_dispersalkm[, i - 1] = X_dispersalkm[, i] - means_X_dispersalkm[i - 1];
  }
  for (i in 2:K_meanhram2) {
    means_X_meanhram2[i - 1] = mean(X_meanhram2[, i]);
    Xc_meanhram2[, i - 1] = X_meanhram2[, i] - means_X_meanhram2[i - 1];
  }
  for (i in 2:K_Migrationkm) {
    means_X_Migrationkm[i - 1] = mean(X_Migrationkm[, i]);
    Xc_Migrationkm[, i - 1] = X_Migrationkm[, i] - means_X_Migrationkm[i - 1];
  }
}
parameters {
  vector[Kc_dispersalkm] b_dispersalkm;  // population-level effects
  // temporary intercept for centered predictors
  real Intercept_dispersalkm;
  real<lower=0> sigma_dispersalkm;  // residual SD
  vector[Kc_meanhram2] b_meanhram2;  // population-level effects
  // temporary intercept for centered predictors
  real Intercept_meanhram2;
  real<lower=0> sigma_meanhram2;  // residual SD
  vector[Kc_Migrationkm] b_Migrationkm;  // population-level effects
  // temporary intercept for centered predictors
  real Intercept_Migrationkm;
  real<lower=0> sigma_Migrationkm;  // residual SD
  real<lower=0,upper=1> hu_Migrationkm;  // hurdle probability
  vector<lower=0>[M_1] sd_1;  // group-level standard deviations
  // standardized group-level effects
  vector[N_1] z_1[M_1];
  vector<lower=0>[M_2] sd_2;  // group-level standard deviations
  // standardized group-level effects
  vector[N_2] z_2[M_2];
  vector<lower=0>[M_3] sd_3;  // group-level standard deviations
  // standardized group-level effects
  vector[N_3] z_3[M_3];
}
transformed parameters {
  // actual group-level effects
  vector[N_1] r_1_dispersalkm_1 = (sd_1[1] * (Lcov_1 * z_1[1]));
  // actual group-level effects
  vector[N_2] r_2_meanhram2_1 = (sd_2[1] * (Lcov_2 * z_2[1]));
  // actual group-level effects
  vector[N_3] r_3_Migrationkm_1 = (sd_3[1] * (Lcov_3 * z_3[1]));
}
model {
  // initialize linear predictor term
  vector[N_dispersalkm] mu_dispersalkm = Intercept_dispersalkm + Xc_dispersalkm * b_dispersalkm;
  // initialize linear predictor term
  vector[N_meanhram2] mu_meanhram2 = Intercept_meanhram2 + Xc_meanhram2 * b_meanhram2;
  // initialize linear predictor term
  vector[N_Migrationkm] mu_Migrationkm = Intercept_Migrationkm + Xc_Migrationkm * b_Migrationkm;
  for (n in 1:N_dispersalkm) {
    // add more terms to the linear predictor
    mu_dispersalkm[n] += r_1_dispersalkm_1[J_1_dispersalkm[n]] * Z_1_dispersalkm_1[n];
  }
  for (n in 1:N_meanhram2) {
    // add more terms to the linear predictor
    mu_meanhram2[n] += r_2_meanhram2_1[J_2_meanhram2[n]] * Z_2_meanhram2_1[n];
  }
  for (n in 1:N_Migrationkm) {
    // add more terms to the linear predictor
    mu_Migrationkm[n] += r_3_Migrationkm_1[J_3_Migrationkm[n]] * Z_3_Migrationkm_1[n];
  }
  // priors including all constants
  target += student_t_lpdf(Intercept_dispersalkm | 3, 2, 10);
  target += student_t_lpdf(sigma_dispersalkm | 3, 0, 10)
    - 1 * student_t_lccdf(0 | 3, 0, 10);
  target += student_t_lpdf(Intercept_meanhram2 | 3, 11, 10);
  target += student_t_lpdf(sigma_meanhram2 | 3, 0, 10)
    - 1 * student_t_lccdf(0 | 3, 0, 10);
  target += student_t_lpdf(Intercept_Migrationkm | 3, 1, 10);
  target += student_t_lpdf(sigma_Migrationkm | 3, 0, 10)
    - 1 * student_t_lccdf(0 | 3, 0, 10);
  target += beta_lpdf(hu_Migrationkm | 1, 1);
  target += student_t_lpdf(sd_1 | 3, 0, 10)
    - 1 * student_t_lccdf(0 | 3, 0, 10);
  target += normal_lpdf(z_1[1] | 0, 1);
  target += student_t_lpdf(sd_2 | 3, 0, 10)
    - 1 * student_t_lccdf(0 | 3, 0, 10);
  target += normal_lpdf(z_2[1] | 0, 1);
  target += student_t_lpdf(sd_3 | 3, 0, 10)
    - 1 * student_t_lccdf(0 | 3, 0, 10);
  target += normal_lpdf(z_3[1] | 0, 1);
  // likelihood including all constants
  if (!prior_only) {
    target += lognormal_lpdf(Y_dispersalkm | mu_dispersalkm, sigma_dispersalkm);
    target += lognormal_lpdf(Y_meanhram2 | mu_meanhram2, sigma_meanhram2);
    for (n in 1:N_Migrationkm) {
      target += hurdle_lognormal_lpdf(Y_Migrationkm[n] | mu_Migrationkm[n], sigma_Migrationkm, hu_Migrationkm);
    }
  }
}
generated quantities {
  // actual population-level intercept
  real b_dispersalkm_Intercept = Intercept_dispersalkm - dot_product(means_X_dispersalkm, b_dispersalkm);
  // actual population-level intercept
  real b_meanhram2_Intercept = Intercept_meanhram2 - dot_product(means_X_meanhram2, b_meanhram2);
  // actual population-level intercept
  real b_Migrationkm_Intercept = Intercept_Migrationkm - dot_product(means_X_Migrationkm, b_Migrationkm);
}
